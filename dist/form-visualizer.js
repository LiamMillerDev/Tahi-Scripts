class TypeWriter{constructor(t,e,i=50){this.element=t,this.text=e,this.speed=i,this.currentChar=0,this.isTyping=!1}async type(){for(this.isTyping=!0,this.element.textContent="";this.currentChar<this.text.length;)await new Promise((t=>setTimeout(t,this.speed))),this.element.textContent+=this.text.charAt(this.currentChar),this.currentChar++;return this.isTyping=!1,!0}reset(){this.currentChar=0,this.isTyping=!1,this.element.textContent="-"}}class FormVisualizerState{constructor(){this.formData={},this.currentStep=1,this.steps=[{field:"firstName",label:"First Name"},{field:"lastName",label:"Last Name"},{field:"companyName",label:"Company Name"},{field:"jobTitle",label:"Job Title"}],this.activeTab="crm",this.pipelineStage="unqualified",this.isComplete=!1,this.animationStates={crm:{played:!1},pipeline:{played:!1}}}updateFormData(t,e){return this.formData[t]=e,this.isComplete=this.steps.every((t=>this.formData[t.field]&&this.formData.email)),this.formData}nextStep(){return this.currentStep<this.steps.length?this.currentStep++:this.currentStep=1,this.steps[this.currentStep-1]}getCurrentStep(){return this.steps[this.currentStep-1]}setActiveTab(t){return this.activeTab=t,this.activeTab}updatePipelineStage(){const t=Object.keys(this.formData).length;return t<=1?"unqualified":t<=2?"marketing":t<=3?"sales":t<=4?"opportunity":"customer"}reset(){this.formData={},this.currentStep=1,this.activeTab="crm",this.pipelineStage="unqualified",this.isComplete=!1,this.resetAnimationStates()}resetAnimationStates(){this.animationStates={crm:{played:!1},pipeline:{played:!1}}}markAnimationPlayed(t){this.animationStates[t].played=!0}shouldPlayAnimation(t){return!this.animationStates[t].played&&Object.keys(this.formData).length>0}}class AnimationController{constructor(){this.gsap=window.gsap,this.defaultDuration=.3,this.loadingOverlay=document.querySelector(".loading-overlay"),this.pageRefresh=document.querySelector(".page-refresh"),this.writers=new Map}fadeOut(t){return this.gsap.to(t,{opacity:0,duration:this.defaultDuration})}fadeIn(t){return this.gsap.to(t,{opacity:1,duration:this.defaultDuration})}async refreshAnimation(t){this.loadingOverlay.classList.add("is-active");const e=this.gsap.timeline();return e.to(this.pageRefresh,{opacity:.5,duration:.2,ease:"power2.in"}).to(this.pageRefresh,{opacity:0,duration:.3,ease:"power2.out"}),await new Promise((t=>setTimeout(t,1e3))),this.loadingOverlay.classList.remove("is-active"),e}moveCard(t,{x:e,y:i}){return this.gsap.to(t,{x:e,y:i,duration:.5,ease:"power2.out"})}updateProgress(t){document.querySelectorAll(".progress_step").forEach(((e,i)=>{i+1<t?(e.classList.add("is-complete"),e.classList.remove("is-active")):i+1===t?(e.classList.add("is-active"),e.classList.remove("is-complete")):e.classList.remove("is-active","is-complete")}))}async animatePipelineCard(t,e,i){const s=document.querySelector(`[ts-pipeline="${e}"]`),a=document.querySelector(`[ts-pipeline="${i}"]`);if(!s||!a)return;const n=s.getBoundingClientRect(),r=a.getBoundingClientRect().left-n.left;await this.gsap.to(t,{x:r,duration:.8,ease:"power2.inOut"}),a.appendChild(t),this.gsap.set(t,{x:0})}createTypeWriter(t,e){return this.writers.has(t)||this.writers.set(t,new TypeWriter(t,e)),this.writers.get(t)}clearTypeWriters(){this.writers.forEach((t=>t.reset())),this.writers.clear()}}class FormController{constructor(t,e){console.log("FormController initialized"),this.state=t,this.animations=e,this.emailField=document.querySelector("[ts-email]"),this.dynamicField=document.querySelector("[ts-dynamic]"),this.nextButton=document.querySelector("[ts-next]"),this.submitButton=document.querySelector("[ts-submit]"),this.clearButton=document.querySelector("[ts-clear]"),this.formSteps=document.querySelectorAll(".form_step"),this.emailLocked=!1,this.emailValue="",console.log("Found elements:",{emailField:!!this.emailField,dynamicField:!!this.dynamicField,nextButton:!!this.nextButton,submitButton:!!this.submitButton,clearButton:!!this.clearButton,formSteps:this.formSteps.length}),this.completionMessage='\n      <div class="completion_message">\n        <h3>Do this and more with Nodeo...</h3>\n        <a href="/pricing" class="completion_button">View Pricing</a>\n      </div>\n    ',this.setupEventListeners()}setupEventListeners(){console.log("Setting up event listeners"),this.nextButton&&this.nextButton.addEventListener("click",(t=>{console.log("Next button clicked"),t.preventDefault(),this.handleNext()})),this.submitButton&&this.submitButton.addEventListener("click",(t=>{console.log("Submit button clicked"),t.preventDefault(),this.handleSubmit()})),this.emailField&&this.emailField.addEventListener("input",(t=>{console.log("Email input:",t.target.value),this.validateEmail(t.target.value)})),this.clearButton&&this.clearButton.addEventListener("click",(t=>{console.log("Clear button clicked"),t.preventDefault(),this.handleClear()}))}async handleNext(){console.log("Handling next action"),this.validateEmail(this.emailField.value)&&(this.emailValue=this.emailField.value,this.state.updateFormData("email",this.emailValue),this.emailField.disabled=!0,this.emailField.classList.add("is-disabled"),this.emailLocked=!0,await this.switchToStep(2),setTimeout((()=>{this.dynamicField.focus()}),300))}async handleSubmit(){console.log("Handling submit action");const t=this.dynamicField.value.trim();if(!t)return void this.dynamicField.classList.add("is-invalid");const e=this.state.getCurrentStep();if(this.state.updateFormData(e.field,t),await this.animations.refreshAnimation(),this.dynamicField.value="",this.dynamicField.classList.remove("is-invalid"),this.state.isComplete)this.showCompletionMessage();else{await this.switchToStep(1);const t=this.state.nextStep();this.dynamicField.placeholder=t.label}document.dispatchEvent(new CustomEvent("formSubmit",{detail:{formData:this.state.formData}}))}showCompletionMessage(){document.querySelector(".component_form").innerHTML=this.completionMessage}async handleClear(){this.state.reset();document.querySelector(".component_form").innerHTML='\n      <div class="form_progress">\n        <div class="progress_step is-active" data-step="1"></div>\n        <div class="progress_step" data-step="2"></div>\n        <div class="progress_step" data-step="3"></div>\n        <div class="progress_step" data-step="4"></div>\n      </div>\n      <div class="form_step is-active" data-step="1">\n        <div class="form_input-wrapper">\n          <input type="email" class="form_input" ts-email placeholder="Email Address">\n        </div>\n        <div class="form_button-wrapper">\n          <button class="form_button button_next" ts-next>Next</button>\n        </div>\n      </div>\n      <div class="form_step" data-step="2">\n        <div class="form_input-wrapper">\n          <input type="text" class="form_input" ts-dynamic placeholder="First Name">\n        </div>\n        <div class="form_button-wrapper">\n          <button class="form_button button_next" ts-submit>Submit</button>\n        </div>\n      </div>\n    ',this.emailField=document.querySelector("[ts-email]"),this.dynamicField=document.querySelector("[ts-dynamic]"),this.nextButton=document.querySelector("[ts-next]"),this.submitButton=document.querySelector("[ts-submit]"),this.formSteps=document.querySelectorAll(".form_step"),this.emailLocked=!1,this.emailValue="",this.setupEventListeners(),setTimeout((()=>{this.emailField.focus()}),300),document.dispatchEvent(new CustomEvent("formReset"))}validateEmail(t){const e=/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(t);return this.emailField&&!this.emailLocked&&(this.emailField.classList.toggle("is-valid",e),this.emailField.classList.toggle("is-invalid",!e)),e}async switchToStep(t){console.log("Switching to step:",t);const e=document.querySelector(".form_step.is-active"),i=document.querySelector(`.form_step[data-step="${t}"]`);if(e&&i)try{await this.animations.fadeOut(e),e.classList.remove("is-active"),i.classList.add("is-active"),await this.animations.fadeIn(i),this.animations.updateProgress(t),2===t&&(this.dynamicField.placeholder=this.state.getCurrentStep().label),console.log("Step switch complete")}catch(t){console.error("Error switching steps:",t)}else console.error("Missing step elements")}}class VisualizationController{constructor(t,e){this.state=t,this.animations=e,this.tabButtons=document.querySelectorAll("[ts-tab]"),this.tabContents=document.querySelectorAll("[ts-content]"),this.stages=["unqualified","marketing","sales","opportunity","customer"],this.currentCard=null,this.lastAnimatedState={crm:{},pipeline:{stage:"unqualified"}},this.setupEventListeners(),this.setupFormListener()}setupEventListeners(){this.tabButtons.forEach((t=>{t.addEventListener("click",(()=>this.switchTab(t.getAttribute("ts-tab"))))}))}setupFormListener(){document.addEventListener("formSubmit",(async t=>{await this.updateVisualizations(t.detail.formData,!0)})),document.addEventListener("formReset",(()=>this.resetVisualizations()))}async updateVisualizations(t,e=!1){"crm"===this.state.activeTab?(await this.updateCRM(t,!0),await this.updatePipeline(t,!1)):"pipeline"===this.state.activeTab?(await this.updateCRM(t,!1),await this.updatePipeline(t,!0)):(await this.updateCRM(t,!1),await this.updatePipeline(t,!1)),this.updateBusinessCard(t),e&&("crm"===this.state.activeTab&&(this.lastAnimatedState.crm={...t}),"pipeline"===this.state.activeTab&&(this.lastAnimatedState.pipeline.stage=this.state.updatePipelineStage()))}async switchTab(t){const e=document.querySelector(`[ts-content="${this.state.activeTab}"]`),i=document.querySelector(`[ts-content="${t}"]`);if(this.tabButtons.forEach((e=>{e.classList.toggle("is-active",e.getAttribute("ts-tab")===t)})),await this.animations.fadeOut(e),e.classList.remove("is-active"),this.state.setActiveTab(t),i.classList.add("is-active"),await this.animations.fadeIn(i),Object.keys(this.state.formData).length>0)if("crm"===t){const t={},e=["email","firstName","lastName","companyName","jobTitle"];for(const i of e)this.state.formData[i]&&this.state.formData[i]!==this.lastAnimatedState.crm[i]&&(t[i]=this.state.formData[i]);Object.keys(t).length>0&&(await this.updateCRM(this.state.formData,!0),this.lastAnimatedState.crm={...this.state.formData})}else if("pipeline"===t){const t=this.state.updatePipelineStage();t!==this.lastAnimatedState.pipeline.stage&&(await this.updatePipeline(this.state.formData,!0),this.lastAnimatedState.pipeline.stage=t)}}async updateCRM(t,e=!0){const i=["email","firstName","lastName","companyName","jobTitle"];if(e)for(const e of i){const i=document.querySelector(`[ts-crm-${e}]`);if(i&&t[e]&&t[e]!==this.lastAnimatedState.crm[e]){const s=this.animations.createTypeWriter(i,t[e]);await s.type(),await new Promise((t=>setTimeout(t,200))),this.lastAnimatedState.crm[e]=t[e]}}else i.forEach((e=>{const i=document.querySelector(`[ts-crm-${e}]`);i&&t[e]&&(i.textContent=t[e])}))}async updatePipeline(t,e=!0){const i=this.state.updatePipelineStage();if(this.currentCard)this.updatePipelineCard(this.currentCard,t);else{this.currentCard=this.createPipelineCard(t);document.querySelector(`[ts-pipeline="${this.stages[0]}"]`).appendChild(this.currentCard)}if(!e){const t=document.querySelector(`[ts-pipeline="${i}"]`);return void(t&&t.appendChild(this.currentCard))}const s=this.findCardStage(this.currentCard),a=this.stages.indexOf(s),n=this.stages.indexOf(i);for(let t=a;t<n;t++)await new Promise((t=>setTimeout(t,500))),await this.animations.animatePipelineCard(this.currentCard,this.stages[t],this.stages[t+1])}findCardStage(t){for(const e of this.stages){const i=document.querySelector(`[ts-pipeline="${e}"]`);if(i&&i.contains(t))return e}return this.stages[0]}createPipelineCard(t){const e=document.createElement("div");return e.className="pipeline_card",this.updatePipelineCard(e,t),e}updatePipelineCard(t,e){t.innerHTML=`\n      <div class="card_name">${e.firstName||""} ${e.lastName||""}</div>\n      <div class="card_company">${e.companyName||""}</div>\n      <div class="card_email">${e.email||""}</div>\n    `}updateBusinessCard(t){const e=document.querySelector("[ts-card-name]"),i=document.querySelector("[ts-card-title]"),s=document.querySelector("[ts-card-company]"),a=document.querySelector("[ts-card-email]");e&&(e.textContent=`${t.firstName||""} ${t.lastName||""}`.trim()||"-"),i&&(i.textContent=t.jobTitle||"-"),s&&(s.textContent=t.companyName||"-"),a&&(a.textContent=t.email||"-")}resetVisualizations(){document.querySelectorAll('[class*="ts-crm-"]').forEach((t=>{t.textContent="-"})),document.querySelectorAll(".pipeline_cards").forEach((t=>{t.innerHTML=""})),this.currentCard=null,document.querySelectorAll('[class*="ts-card-"]').forEach((t=>{t.textContent="-"})),this.lastAnimatedState={crm:{},pipeline:{stage:"unqualified"}},this.animations.clearTypeWriters()}}class FormVisualizer{constructor(t={}){this.config={stepDuration:300,refreshDuration:1e3,validateEmail:!0,...t},this.state=new FormVisualizerState,this.animations=new AnimationController,this.form=new FormController(this.state,this.animations),this.visualizations=new VisualizationController(this.state,this.animations)}reset(){this.state.reset(),this.form.handleClear()}}"undefined"!=typeof window&&window.gsap&&document.addEventListener("DOMContentLoaded",(()=>{window.formVisualizer=new FormVisualizer}));