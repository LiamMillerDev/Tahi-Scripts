class AdventureFlow{constructor(t,e={}){this.wrapper="string"==typeof t?document.querySelector(t):t,this.wrapper?(this.config={animationSpeed:e.animationSpeed||300,pathDuration:e.pathDuration||500,fadeDuration:e.fadeDuration||200,pathStyle:e.pathStyle||"orthogonal",pathColor:e.pathColor||"#4299e1",pathWidth:e.pathWidth||2,enableTouch:!1!==e.enableTouch,enableKeyboard:!1!==e.enableKeyboard,onSelect:e.onSelect||(()=>{}),onPathComplete:e.onPathComplete||(()=>{}),onReset:e.onReset||(()=>{})},this.state={mouseX:0,mouseY:0,selectedCards:new Map,activePaths:new Map,currentTier:1,isAnimating:!1},this.elements={svg:this.wrapper.querySelector(".path_layer"),mousePath:this.wrapper.querySelector(".path_mouse"),startConnector:this.wrapper.querySelector(".connector_start"),tiers:Array.from(this.wrapper.querySelectorAll(".tier_wrapper"))},this.init()):console.error("AdventureFlow: Wrapper element not found")}init(){this.updateSVGViewBox(),this.bindEvents(),this.hideConditionalContent(),this.animate()}bindEvents(){this.wrapper.addEventListener("mousemove",this.handleMouseMove.bind(this)),this.wrapper.addEventListener("click",this.handleClick.bind(this)),this.wrapper.addEventListener("mouseenter",this.handleCardHover.bind(this),!0),this.wrapper.addEventListener("mouseleave",this.handleCardLeave.bind(this),!0),this.config.enableTouch&&(this.wrapper.addEventListener("touchstart",this.handleTouchStart.bind(this),{passive:!0}),this.wrapper.addEventListener("touchmove",this.handleTouchMove.bind(this),{passive:!1}),this.wrapper.addEventListener("touchend",this.handleTouchEnd.bind(this))),this.config.enableKeyboard&&document.addEventListener("keydown",this.handleKeyDown.bind(this)),window.addEventListener("resize",this.handleResize.bind(this))}handleMouseMove(t){const e=this.wrapper.getBoundingClientRect();this.state.mouseX=t.clientX-e.left,this.state.mouseY=t.clientY-e.top}handleClick(t){const e=t.target.closest(".card_selection");if(!e)return;const s=e.getAttribute("ts-option");s&&this.selectCard(e,s)}handleCardHover(t){const e=t.target.closest(".card_selection");e&&e.classList.add("is-highlighted")}handleCardLeave(t){const e=t.target.closest(".card_selection");e&&e.classList.remove("is-highlighted")}handleTouchStart(t){const e=t.touches[0],s=this.wrapper.getBoundingClientRect();this.state.mouseX=e.clientX-s.left,this.state.mouseY=e.clientY-s.top}handleTouchMove(t){t.preventDefault();const e=t.touches[0],s=this.wrapper.getBoundingClientRect();this.state.mouseX=e.clientX-s.left,this.state.mouseY=e.clientY-s.top}handleTouchEnd(t){const e=t.changedTouches[0],s=document.elementFromPoint(e.clientX,e.clientY),i=s?.closest(".card_selection");if(i){const t=i.getAttribute("ts-option");t&&this.selectCard(i,t)}}handleKeyDown(t){"Escape"===t.key&&this.reset()}handleResize(){this.updateSVGViewBox(),this.updatePaths()}selectCard(t,e){if(this.state.isAnimating)return;this.state.isAnimating=!0;const s=t.closest(".tier_wrapper"),i=parseInt(s.getAttribute("data-tier")),a=this.state.selectedCards.get(i);a?.option!==e?(this.clearSelectionsAfterTier(i-1),this.state.selectedCards.set(i,{card:t,option:e}),this.state.currentTier=i,this.updateCardStates(),i<3&&this.showConditionalContent(e),this.createConnectionPath(t),this.config.onSelect(e),setTimeout((()=>{this.state.isAnimating=!1}),this.config.animationSpeed)):this.state.isAnimating=!1}clearSelectionsAfterTier(t){for(let e=t+1;e<=this.elements.tiers.length;e++)this.state.selectedCards.delete(e),this.state.activePaths.delete(e)}updateCardStates(){this.wrapper.querySelectorAll(".card_selection").forEach((t=>{t.classList.remove("is-active"),t.classList.remove("is-disabled")})),this.state.selectedCards.forEach((({card:t,option:e},s)=>{t.classList.add("is-active");t.closest(".tier_wrapper").querySelectorAll(".card_selection").forEach((e=>{e!==t&&e.classList.add("is-disabled")}))}));const t=this.state.currentTier+1,e=this.elements.tiers[t-1];if(e){const t=e.querySelector(".card_group.is-active");t&&t.querySelectorAll(".card_selection").forEach((t=>{t.classList.remove("is-disabled")}))}}showConditionalContent(t){const e=this.state.currentTier+1,s=this.elements.tiers[e-1];if(!s)return;s.querySelectorAll(".card_group").forEach((t=>{t.classList.remove("is-active")}));const i=s.querySelector(`[ts-parent="${t}"]`);if(i&&(i.classList.add("is-active"),2===e)){const t=this.elements.tiers[2];t&&t.querySelectorAll(".card_group").forEach((t=>{t.classList.remove("is-active")}))}}hideConditionalContent(){this.wrapper.querySelectorAll(".card_group").forEach((t=>{t.classList.remove("is-active")}))}createConnectionPath(t){const e=1===this.state.currentTier?this.elements.startConnector:this.state.selectedCards.get(this.state.currentTier-1)?.card;if(!e||!t)return;const s=this.calculatePath(e,t),i=this.createSVGPath(s);this.state.activePaths.set(this.state.currentTier,i),this.animatePath(i)}calculatePath(t,e){const s=t.getBoundingClientRect(),i=e.getBoundingClientRect(),a=this.wrapper.getBoundingClientRect(),n=s.left+s.width/2-a.left,r=s.bottom-a.top,o=i.left+i.width/2-a.left,h=i.top-a.top,c=(r+h)/2,l=20;return`M ${n} ${r}\n            L ${n} ${r-l}\n            Q ${n} ${c} ${n<o?n+l:n-l} ${c}\n            L ${o<n?o+l:o-l} ${c}\n            Q ${o} ${c} ${o} ${h+l}\n            L ${o} ${h}`}createSVGPath(t){const e=document.createElementNS("http://www.w3.org/2000/svg","path");return e.setAttribute("class","path_connection"),e.setAttribute("d",t),this.elements.svg.appendChild(e),e}animatePath(t){const e=t.getTotalLength();t.style.strokeDasharray=e,t.style.strokeDashoffset=e,t.getBoundingClientRect(),t.style.transition=`stroke-dashoffset ${this.config.pathDuration}ms ease`,t.style.strokeDashoffset="0",t.classList.add("is-active")}updateMousePath(){if(!this.elements.mousePath)return;const t=1===this.state.currentTier?this.elements.startConnector:this.state.selectedCards.get(this.state.currentTier)?.card;if(!t)return;const e=this.wrapper.getBoundingClientRect(),s=t.getBoundingClientRect(),i=s.left+s.width/2-e.left,a=(this.state.currentTier,s.bottom-e.top),n=(a+this.state.mouseY)/2,r=`M ${i} ${a}\n                  L ${i} ${n-20}\n                  Q ${i} ${n} ${i<this.state.mouseX?i+20:i-20} ${n}\n                  L ${this.state.mouseX<i?this.state.mouseX+20:this.state.mouseX-20} ${n}\n                  Q ${this.state.mouseX} ${n} ${this.state.mouseX} ${this.state.mouseY}`;this.elements.mousePath.setAttribute("d",r)}updateSVGViewBox(){const t=this.wrapper.getBoundingClientRect();this.elements.svg.setAttribute("viewBox",`0 0 ${t.width} ${t.height}`)}updatePaths(){this.state.activePaths.forEach((t=>t.remove())),this.state.activePaths.clear(),this.state.selectedCards.forEach((({card:t},e)=>{e>1&&this.createConnectionPath(t)}))}reset(){this.state.selectedCards.clear(),this.state.activePaths.forEach((t=>t.remove())),this.state.activePaths.clear(),this.state.currentTier=1,this.updateCardStates(),this.hideConditionalContent(),this.config.onReset()}animate(){this.updateMousePath(),requestAnimationFrame(this.animate.bind(this))}select(t){const e=this.wrapper.querySelector(`[ts-option="${t}"]`);e&&this.selectCard(e,t)}highlightPath(t){const e=this.wrapper.querySelector(`[ts-option="${t}"]`);e&&e.classList.add("is-highlighted")}disable(t){const e=this.wrapper.querySelector(`[ts-option="${t}"]`);e&&e.classList.add("is-disabled")}enable(t){const e=this.wrapper.querySelector(`[ts-option="${t}"]`);e&&e.classList.remove("is-disabled")}}document.addEventListener("DOMContentLoaded",(()=>{document.querySelectorAll(".section_adventure-flow").forEach((t=>new AdventureFlow(t)))})),"undefined"!=typeof module&&module.exports&&(module.exports=AdventureFlow);